/* This file was generated by SableCC (http://www.sablecc.org/). */

package work.parser;

import work.lexer.*;
import work.node.*;
import work.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AMainProgram */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAformatdecprogram1Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AAformatdecprogram2Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AIntDeclarationDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AStringDeclarationDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ADoubleDeclarationDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AIntDeclarationAssignmentDeclaration */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AStringDeclarationAssignmentDeclaration */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ADoubleDeclarationAssignmentDeclaration */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce ADeclarationLine */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce APrintlnVarLine */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce APrintlnStringLine */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce APrintlnNumberLine */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce APrintVarLine */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce APrintStringLine */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce APrintNumberLine */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AInputLine */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce AIncrementLine */
            {
                ArrayList<Object> list = new18();
                push(goTo(4), list, false);
            }
            break;
            case 19: /* reduce ADecrementLine */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list, false);
            }
            break;
            case 20: /* reduce AFlowControlLine */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce AAssignmentLine */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list, false);
            }
            break;
            case 22: /* reduce AAifflowcontrol1FlowControl */
            {
                ArrayList<Object> list = new22();
                push(goTo(5), list, false);
            }
            break;
            case 23: /* reduce AAifflowcontrol2FlowControl */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AAifelseflowcontrol1FlowControl */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce AAifelseflowcontrol2FlowControl */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce AAwhileflowcontrol1FlowControl */
            {
                ArrayList<Object> list = new26();
                push(goTo(5), list, false);
            }
            break;
            case 27: /* reduce AAwhileflowcontrol2FlowControl */
            {
                ArrayList<Object> list = new27();
                push(goTo(5), list, false);
            }
            break;
            case 28: /* reduce AAelsestatement1ElseStatement */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list, false);
            }
            break;
            case 29: /* reduce AAelsestatement2ElseStatement */
            {
                ArrayList<Object> list = new29();
                push(goTo(6), list, false);
            }
            break;
            case 30: /* reduce ASecondConditionCondition */
            {
                ArrayList<Object> list = new30();
                push(goTo(7), list, false);
            }
            break;
            case 31: /* reduce AAndCondition */
            {
                ArrayList<Object> list = new31();
                push(goTo(7), list, false);
            }
            break;
            case 32: /* reduce AOrCondition */
            {
                ArrayList<Object> list = new32();
                push(goTo(7), list, false);
            }
            break;
            case 33: /* reduce ADoubleEqualsSecondCondition */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list, false);
            }
            break;
            case 34: /* reduce ANotEqualsSecondCondition */
            {
                ArrayList<Object> list = new34();
                push(goTo(8), list, false);
            }
            break;
            case 35: /* reduce AGreaterSecondCondition */
            {
                ArrayList<Object> list = new35();
                push(goTo(8), list, false);
            }
            break;
            case 36: /* reduce AGreaterEqSecondCondition */
            {
                ArrayList<Object> list = new36();
                push(goTo(8), list, false);
            }
            break;
            case 37: /* reduce ALessSecondCondition */
            {
                ArrayList<Object> list = new37();
                push(goTo(8), list, false);
            }
            break;
            case 38: /* reduce ALessEqSecondCondition */
            {
                ArrayList<Object> list = new38();
                push(goTo(8), list, false);
            }
            break;
            case 39: /* reduce AGroupedSecondCondition */
            {
                ArrayList<Object> list = new39();
                push(goTo(8), list, false);
            }
            break;
            case 40: /* reduce AExprItem1 */
            {
                ArrayList<Object> list = new40();
                push(goTo(9), list, false);
            }
            break;
            case 41: /* reduce AExprItem2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(10), list, false);
            }
            break;
            case 42: /* reduce AStrAssignmentAssignment */
            {
                ArrayList<Object> list = new42();
                push(goTo(11), list, false);
            }
            break;
            case 43: /* reduce AExprAssignmentAssignment */
            {
                ArrayList<Object> list = new43();
                push(goTo(11), list, false);
            }
            break;
            case 44: /* reduce APlusExpr */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list, false);
            }
            break;
            case 45: /* reduce AMinusExpr */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list, false);
            }
            break;
            case 46: /* reduce ATermExpr */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list, false);
            }
            break;
            case 47: /* reduce AMultTerm */
            {
                ArrayList<Object> list = new47();
                push(goTo(13), list, false);
            }
            break;
            case 48: /* reduce ADivTerm */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
            case 49: /* reduce AModTerm */
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list, false);
            }
            break;
            case 50: /* reduce AUnaryTerm */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list, false);
            }
            break;
            case 51: /* reduce ANegUnary */
            {
                ArrayList<Object> list = new51();
                push(goTo(14), list, false);
            }
            break;
            case 52: /* reduce AFactorUnary */
            {
                ArrayList<Object> list = new52();
                push(goTo(14), list, false);
            }
            break;
            case 53: /* reduce ANumberFactor */
            {
                ArrayList<Object> list = new53();
                push(goTo(15), list, false);
            }
            break;
            case 54: /* reduce AVarFactor */
            {
                ArrayList<Object> list = new54();
                push(goTo(15), list, false);
            }
            break;
            case 55: /* reduce AGroupedFactor */
            {
                ArrayList<Object> list = new55();
                push(goTo(15), list, false);
            }
            break;
            case 56: /* reduce ATerminal$Line */
            {
                ArrayList<Object> list = new56();
                push(goTo(16), list, true);
            }
            break;
            case 57: /* reduce ANonTerminal$Line */
            {
                ArrayList<Object> list = new57();
                push(goTo(16), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PMainProgram pmainprogramNode2;
        pmainprogramNode2 = (PMainProgram)nodeArrayList1.get(0);

        pstartNode1 = new AStart(pmainprogramNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMainProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainProgram pmainprogramNode1;
        {
            // Block
        TMain tmainNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        TLBracket tlbracketNode5;
        PProgram pprogramNode6;
        TRBracket trbracketNode7;
        tmainNode2 = (TMain)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);
        tlbracketNode5 = (TLBracket)nodeArrayList4.get(0);
        pprogramNode6 = (PProgram)nodeArrayList5.get(0);
        trbracketNode7 = (TRBracket)nodeArrayList6.get(0);

        pmainprogramNode1 = new AMainProgram(tmainNode2, tlparNode3, trparNode4, tlbracketNode5, pprogramNode6, trbracketNode7);
        }
	nodeList.add(pmainprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAformatdecprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AFormatDecProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAformatdecprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AFormatDecProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIntDeclarationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TInt tintNode2;
        TVar tvarNode3;
        TSemicolon tsemicolonNode4;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeclarationNode1 = new AIntDeclarationDeclaration(tintNode2, tvarNode3, tsemicolonNode4);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AStringDeclarationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TString tstringNode2;
        TVar tvarNode3;
        TSemicolon tsemicolonNode4;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeclarationNode1 = new AStringDeclarationDeclaration(tstringNode2, tvarNode3, tsemicolonNode4);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADoubleDeclarationDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TDouble tdoubleNode2;
        TVar tvarNode3;
        TSemicolon tsemicolonNode4;
        tdoubleNode2 = (TDouble)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        pdeclarationNode1 = new ADoubleDeclarationDeclaration(tdoubleNode2, tvarNode3, tsemicolonNode4);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AIntDeclarationAssignmentDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TInt tintNode2;
        TVar tvarNode3;
        TEquals tequalsNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new AIntDeclarationAssignmentDeclaration(tintNode2, tvarNode3, tequalsNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AStringDeclarationAssignmentDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TString tstringNode2;
        TVar tvarNode3;
        TEquals tequalsNode4;
        TStringLiteral tstringliteralNode5;
        TSemicolon tsemicolonNode6;
        tstringNode2 = (TString)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        tstringliteralNode5 = (TStringLiteral)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new AStringDeclarationAssignmentDeclaration(tstringNode2, tvarNode3, tequalsNode4, tstringliteralNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADoubleDeclarationAssignmentDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaration pdeclarationNode1;
        {
            // Block
        TDouble tdoubleNode2;
        TVar tvarNode3;
        TEquals tequalsNode4;
        PExpr pexprNode5;
        TSemicolon tsemicolonNode6;
        tdoubleNode2 = (TDouble)nodeArrayList1.get(0);
        tvarNode3 = (TVar)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationNode1 = new ADoubleDeclarationAssignmentDeclaration(tdoubleNode2, tvarNode3, tequalsNode4, pexprNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADeclarationLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        PDeclaration pdeclarationNode2;
        pdeclarationNode2 = (PDeclaration)nodeArrayList1.get(0);

        plineNode1 = new ADeclarationLine(pdeclarationNode2);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce APrintlnVarLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLPar tlparNode3;
        TVar tvarNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tvarNode4 = (TVar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintlnVarLine(tprintlnNode2, tlparNode3, tvarNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce APrintlnStringLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLPar tlparNode3;
        TStringLiteral tstringliteralNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tstringliteralNode4 = (TStringLiteral)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintlnStringLine(tprintlnNode2, tlparNode3, tstringliteralNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce APrintlnNumberLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLPar tlparNode3;
        TNumber tnumberNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintlnNumberLine(tprintlnNode2, tlparNode3, tnumberNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce APrintVarLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrint tprintNode2;
        TLPar tlparNode3;
        TVar tvarNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tvarNode4 = (TVar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintVarLine(tprintNode2, tlparNode3, tvarNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce APrintStringLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrint tprintNode2;
        TLPar tlparNode3;
        TStringLiteral tstringliteralNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tstringliteralNode4 = (TStringLiteral)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintStringLine(tprintNode2, tlparNode3, tstringliteralNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce APrintNumberLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TPrint tprintNode2;
        TLPar tlparNode3;
        TNumber tnumberNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tnumberNode4 = (TNumber)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new APrintNumberLine(tprintNode2, tlparNode3, tnumberNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AInputLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TInput tinputNode2;
        TLPar tlparNode3;
        TVar tvarNode4;
        TRPar trparNode5;
        TSemicolon tsemicolonNode6;
        tinputNode2 = (TInput)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        tvarNode4 = (TVar)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        plineNode1 = new AInputLine(tinputNode2, tlparNode3, tvarNode4, trparNode5, tsemicolonNode6);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AIncrementLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TVar tvarNode2;
        TInc tincNode3;
        TSemicolon tsemicolonNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tincNode3 = (TInc)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        plineNode1 = new AIncrementLine(tvarNode2, tincNode3, tsemicolonNode4);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ADecrementLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        TVar tvarNode2;
        TDec tdecNode3;
        TSemicolon tsemicolonNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tdecNode3 = (TDec)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);

        plineNode1 = new ADecrementLine(tvarNode2, tdecNode3, tsemicolonNode4);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFlowControlLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        PFlowControl pflowcontrolNode2;
        pflowcontrolNode2 = (PFlowControl)nodeArrayList1.get(0);

        plineNode1 = new AFlowControlLine(pflowcontrolNode2);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAssignmentLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        PAssignment passignmentNode2;
        TSemicolon tsemicolonNode3;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        plineNode1 = new AAssignmentLine(passignmentNode2, tsemicolonNode3);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAifflowcontrol1FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRBracket trbracketNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        }
        trbracketNode8 = (TRBracket)nodeArrayList6.get(0);

        pflowcontrolNode1 = new AIfFlowControl(tifNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode7, trbracketNode8);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAifflowcontrol2FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRBracket trbracketNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbracketNode9 = (TRBracket)nodeArrayList7.get(0);

        pflowcontrolNode1 = new AIfFlowControl(tifNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode8, trbracketNode9);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAifelseflowcontrol1FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRBracket trbracketNode8;
        PElseStatement pelsestatementNode9;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        }
        trbracketNode8 = (TRBracket)nodeArrayList6.get(0);
        pelsestatementNode9 = (PElseStatement)nodeArrayList7.get(0);

        pflowcontrolNode1 = new AIfElseFlowControl(tifNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode7, trbracketNode8, pelsestatementNode9);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAifelseflowcontrol2FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TIf tifNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRBracket trbracketNode9;
        PElseStatement pelsestatementNode10;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbracketNode9 = (TRBracket)nodeArrayList7.get(0);
        pelsestatementNode10 = (PElseStatement)nodeArrayList8.get(0);

        pflowcontrolNode1 = new AIfElseFlowControl(tifNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode8, trbracketNode9, pelsestatementNode10);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAwhileflowcontrol1FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRBracket trbracketNode8;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        }
        trbracketNode8 = (TRBracket)nodeArrayList6.get(0);

        pflowcontrolNode1 = new AWhileFlowControl(twhileNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode7, trbracketNode8);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAwhileflowcontrol2FlowControl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFlowControl pflowcontrolNode1;
        {
            // Block
        TWhile twhileNode2;
        TLPar tlparNode3;
        PCondition pconditionNode4;
        TRPar trparNode5;
        TLBracket tlbracketNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRBracket trbracketNode9;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tlbracketNode6 = (TLBracket)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbracketNode9 = (TRBracket)nodeArrayList7.get(0);

        pflowcontrolNode1 = new AWhileFlowControl(twhileNode2, tlparNode3, pconditionNode4, trparNode5, tlbracketNode6, listNode8, trbracketNode9);
        }
	nodeList.add(pflowcontrolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAelsestatement1ElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TElse telseNode2;
        TLBracket tlbracketNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRBracket trbracketNode5;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        {
            // Block
        }
        trbracketNode5 = (TRBracket)nodeArrayList3.get(0);

        pelsestatementNode1 = new AElseStatement(telseNode2, tlbracketNode3, listNode4, trbracketNode5);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAelsestatement2ElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStatement pelsestatementNode1;
        {
            // Block
        TElse telseNode2;
        TLBracket tlbracketNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TRBracket trbracketNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlbracketNode3 = (TLBracket)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        trbracketNode6 = (TRBracket)nodeArrayList4.get(0);

        pelsestatementNode1 = new AElseStatement(telseNode2, tlbracketNode3, listNode5, trbracketNode6);
        }
	nodeList.add(pelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASecondConditionCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PSecondCondition psecondconditionNode2;
        psecondconditionNode2 = (PSecondCondition)nodeArrayList1.get(0);

        pconditionNode1 = new ASecondConditionCondition(psecondconditionNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAndCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        TAnd tandNode3;
        PSecondCondition psecondconditionNode4;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        psecondconditionNode4 = (PSecondCondition)nodeArrayList3.get(0);

        pconditionNode1 = new AAndCondition(pconditionNode2, tandNode3, psecondconditionNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AOrCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PCondition pconditionNode2;
        TOr torNode3;
        PSecondCondition psecondconditionNode4;
        pconditionNode2 = (PCondition)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        psecondconditionNode4 = (PSecondCondition)nodeArrayList3.get(0);

        pconditionNode1 = new AOrCondition(pconditionNode2, torNode3, psecondconditionNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ADoubleEqualsSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TDoubleEquals tdoubleequalsNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tdoubleequalsNode3 = (TDoubleEquals)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new ADoubleEqualsSecondCondition(pitem1Node2, tdoubleequalsNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ANotEqualsSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TNotEquals tnotequalsNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tnotequalsNode3 = (TNotEquals)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new ANotEqualsSecondCondition(pitem1Node2, tnotequalsNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AGreaterSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TGreater tgreaterNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new AGreaterSecondCondition(pitem1Node2, tgreaterNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AGreaterEqSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TGreaterEq tgreatereqNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tgreatereqNode3 = (TGreaterEq)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new AGreaterEqSecondCondition(pitem1Node2, tgreatereqNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALessSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TLess tlessNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new ALessSecondCondition(pitem1Node2, tlessNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALessEqSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        PItem1 pitem1Node2;
        TLessEq tlesseqNode3;
        PItem2 pitem2Node4;
        pitem1Node2 = (PItem1)nodeArrayList1.get(0);
        tlesseqNode3 = (TLessEq)nodeArrayList2.get(0);
        pitem2Node4 = (PItem2)nodeArrayList3.get(0);

        psecondconditionNode1 = new ALessEqSecondCondition(pitem1Node2, tlesseqNode3, pitem2Node4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AGroupedSecondCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSecondCondition psecondconditionNode1;
        {
            // Block
        TLPar tlparNode2;
        PCondition pconditionNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        psecondconditionNode1 = new AGroupedSecondCondition(tlparNode2, pconditionNode3, trparNode4);
        }
	nodeList.add(psecondconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExprItem1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItem1 pitem1Node1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pitem1Node1 = new AExprItem1(pexprNode2);
        }
	nodeList.add(pitem1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExprItem2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PItem2 pitem2Node1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pitem2Node1 = new AExprItem2(pexprNode2);
        }
	nodeList.add(pitem2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AStrAssignmentAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TVar tvarNode2;
        TEquals tequalsNode3;
        TStringLiteral tstringliteralNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        tstringliteralNode4 = (TStringLiteral)nodeArrayList3.get(0);

        passignmentNode1 = new AStrAssignmentAssignment(tvarNode2, tequalsNode3, tstringliteralNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExprAssignmentAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TVar tvarNode2;
        TEquals tequalsNode3;
        PExpr pexprNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        passignmentNode1 = new AExprAssignmentAssignment(tvarNode2, tequalsNode3, pexprNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce APlusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AMinusExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATermExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pexprNode1 = new ATermExpr(ptermNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMultTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMult tmultNode3;
        PUnary punaryNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        ptermNode1 = new AMultTerm(ptermNode2, tmultNode3, punaryNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADivTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TDiv tdivNode3;
        PUnary punaryNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        ptermNode1 = new ADivTerm(ptermNode2, tdivNode3, punaryNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AModTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TMod tmodNode3;
        PUnary punaryNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        punaryNode4 = (PUnary)nodeArrayList3.get(0);

        ptermNode1 = new AModTerm(ptermNode2, tmodNode3, punaryNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AUnaryTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PUnary punaryNode2;
        punaryNode2 = (PUnary)nodeArrayList1.get(0);

        ptermNode1 = new AUnaryTerm(punaryNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANegUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        TMinus tminusNode2;
        PUnary punaryNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        punaryNode3 = (PUnary)nodeArrayList2.get(0);

        punaryNode1 = new ANegUnary(tminusNode2, punaryNode3);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFactorUnary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PUnary punaryNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        punaryNode1 = new AFactorUnary(pfactorNode2);
        }
	nodeList.add(punaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANumberFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pfactorNode1 = new ANumberFactor(tnumberNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVarFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TVar tvarNode2;
        tvarNode2 = (TVar)nodeArrayList1.get(0);

        pfactorNode1 = new AVarFactor(tvarNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AGroupedFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfactorNode1 = new AGroupedFactor(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$Line */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLine plineNode1;
        plineNode1 = (PLine)nodeArrayList1.get(0);
	if(plineNode1 != null)
	{
	  listNode2.add(plineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$Line */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLine plineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plineNode2 = (PLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plineNode2 != null)
	{
	  listNode3.add(plineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {30, SHIFT, 1}, },
			{{-1, ERROR, 1}, {12, SHIFT, 4}, },
			{{-1, ERROR, 2}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {13, SHIFT, 5}, },
			{{-1, ERROR, 5}, {26, SHIFT, 6}, },
			{{-1, REDUCE, 2}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, ERROR, 7}, {33, SHIFT, 22}, },
			{{-1, ERROR, 8}, {33, SHIFT, 23}, },
			{{-1, ERROR, 9}, {33, SHIFT, 24}, },
			{{-1, ERROR, 10}, {12, SHIFT, 25}, },
			{{-1, ERROR, 11}, {12, SHIFT, 26}, },
			{{-1, ERROR, 12}, {12, SHIFT, 27}, },
			{{-1, ERROR, 13}, {12, SHIFT, 28}, },
			{{-1, ERROR, 14}, {12, SHIFT, 29}, },
			{{-1, ERROR, 15}, {10, SHIFT, 30}, {11, SHIFT, 31}, {16, SHIFT, 32}, },
			{{-1, ERROR, 16}, {27, SHIFT, 33}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 20}, {14, SHIFT, 34}, },
			{{-1, REDUCE, 3}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, ERROR, 22}, {14, SHIFT, 36}, {16, SHIFT, 37}, },
			{{-1, ERROR, 23}, {14, SHIFT, 38}, {16, SHIFT, 39}, },
			{{-1, ERROR, 24}, {14, SHIFT, 40}, {16, SHIFT, 41}, },
			{{-1, ERROR, 25}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 44}, {33, SHIFT, 45}, },
			{{-1, ERROR, 26}, {0, SHIFT, 53}, {1, SHIFT, 54}, {33, SHIFT, 55}, },
			{{-1, ERROR, 27}, {0, SHIFT, 56}, {1, SHIFT, 57}, {33, SHIFT, 58}, },
			{{-1, ERROR, 28}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 44}, {33, SHIFT, 45}, },
			{{-1, ERROR, 29}, {33, SHIFT, 60}, },
			{{-1, ERROR, 30}, {14, SHIFT, 61}, },
			{{-1, ERROR, 31}, {14, SHIFT, 62}, },
			{{-1, ERROR, 32}, {0, SHIFT, 42}, {1, SHIFT, 63}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 37}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 39}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 41}, {1, SHIFT, 68}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 43}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 44}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 44}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 46}, {13, SHIFT, 72}, {22, SHIFT, 73}, {23, SHIFT, 74}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 48}, {15, SHIFT, 75}, {17, SHIFT, 76}, {18, SHIFT, 77}, {19, SHIFT, 78}, {20, SHIFT, 79}, {21, SHIFT, 80}, },
			{{-1, REDUCE, 40}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, REDUCE, 46}, {7, SHIFT, 83}, {8, SHIFT, 84}, {9, SHIFT, 85}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 53}, {13, SHIFT, 86}, },
			{{-1, ERROR, 54}, {13, SHIFT, 87}, },
			{{-1, ERROR, 55}, {13, SHIFT, 88}, },
			{{-1, ERROR, 56}, {13, SHIFT, 89}, },
			{{-1, ERROR, 57}, {13, SHIFT, 90}, },
			{{-1, ERROR, 58}, {13, SHIFT, 91}, },
			{{-1, ERROR, 59}, {13, SHIFT, 92}, {22, SHIFT, 73}, {23, SHIFT, 74}, },
			{{-1, ERROR, 60}, {13, SHIFT, 93}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 64}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, REDUCE, 43}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, ERROR, 66}, {5, SHIFT, 81}, {6, SHIFT, 82}, {14, SHIFT, 95}, },
			{{-1, ERROR, 67}, {5, SHIFT, 81}, {6, SHIFT, 82}, {14, SHIFT, 96}, },
			{{-1, ERROR, 68}, {14, SHIFT, 97}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 70}, {13, SHIFT, 98}, {22, SHIFT, 73}, {23, SHIFT, 74}, },
			{{-1, REDUCE, 40}, {5, SHIFT, 81}, {6, SHIFT, 82}, {13, SHIFT, 99}, },
			{{-1, ERROR, 72}, {26, SHIFT, 100}, },
			{{-1, ERROR, 73}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 44}, {33, SHIFT, 45}, },
			{{-1, ERROR, 74}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 44}, {33, SHIFT, 45}, },
			{{-1, ERROR, 75}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 76}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 77}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 78}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 79}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 80}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 81}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 82}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 83}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 84}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 85}, {0, SHIFT, 42}, {6, SHIFT, 43}, {12, SHIFT, 64}, {33, SHIFT, 45}, },
			{{-1, ERROR, 86}, {14, SHIFT, 115}, },
			{{-1, ERROR, 87}, {14, SHIFT, 116}, },
			{{-1, ERROR, 88}, {14, SHIFT, 117}, },
			{{-1, ERROR, 89}, {14, SHIFT, 118}, },
			{{-1, ERROR, 90}, {14, SHIFT, 119}, },
			{{-1, ERROR, 91}, {14, SHIFT, 120}, },
			{{-1, ERROR, 92}, {26, SHIFT, 121}, },
			{{-1, ERROR, 93}, {14, SHIFT, 122}, },
			{{-1, ERROR, 94}, {5, SHIFT, 81}, {6, SHIFT, 82}, {13, SHIFT, 99}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 100}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 123}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 41}, {5, SHIFT, 81}, {6, SHIFT, 82}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 44}, {7, SHIFT, 83}, {8, SHIFT, 84}, {9, SHIFT, 85}, },
			{{-1, REDUCE, 45}, {7, SHIFT, 83}, {8, SHIFT, 84}, {9, SHIFT, 85}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 121}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 125}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 22}, {25, SHIFT, 127}, },
			{{-1, ERROR, 124}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 129}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 126}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 130}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, ERROR, 127}, {26, SHIFT, 131}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 23}, {25, SHIFT, 127}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 131}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 133}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 134}, {2, SHIFT, 7}, {3, SHIFT, 8}, {4, SHIFT, 9}, {24, SHIFT, 10}, {27, SHIFT, 135}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 13}, {32, SHIFT, 14}, {33, SHIFT, 15}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 16}, },
			{{-1, 17}, },
			{{-1, 18}, {21, 35}, {124, 35}, {126, 35}, {134, 35}, },
			{{-1, 19}, },
			{{-1, 128}, {129, 132}, },
			{{-1, 46}, {28, 59}, {44, 70}, },
			{{-1, 47}, {73, 101}, {74, 102}, },
			{{-1, 48}, },
			{{-1, 103}, {76, 105}, {77, 106}, {78, 107}, {79, 108}, {80, 109}, },
			{{-1, 20}, },
			{{-1, 104}, {25, 49}, {28, 49}, {32, 65}, {37, 66}, {39, 67}, {44, 71}, {64, 94}, {73, 49}, {74, 49}, },
			{{-1, 50}, {81, 110}, {82, 111}, },
			{{-1, 51}, {43, 69}, {83, 112}, {84, 113}, {85, 114}, },
			{{-1, 52}, },
			{{-1, 21}, {100, 124}, {121, 126}, {131, 134}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'main'",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ')'",
			"expecting: '{'",
			"expecting: 'int', 'double', 'string', 'if', '}', 'print', 'println', 'while', 'input', var",
			"expecting: var",
			"expecting: '++', '--', '='",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: ';', '='",
			"expecting: number, '-', '(', var",
			"expecting: number, string literal, var",
			"expecting: number, string literal, '-', '(', var",
			"expecting: string literal",
			"expecting: '+', '-', '*', '/', '%', ')', ';', '==', '!=', '<=', '>=', '<', '>', '&&', '||'",
			"expecting: ')', '&&', '||'",
			"expecting: '==', '!=', '<=', '>=', '<', '>'",
			"expecting: '+', '-', '==', '!=', '<=', '>=', '<', '>'",
			"expecting: '+', '-', ';'",
			"expecting: '+', '-', ')', '==', '!=', '<=', '>=', '<', '>'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', ')', '&&', '||'",
			"expecting: 'int', 'double', 'string', 'if', 'else', '}', 'print', 'println', 'while', 'input', var",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 5, 6, 6, 6, 1, 1, 1, 1, 1, 7, 8, 5, 5, 5, 9, 5, 10, 10, 10, 11, 12, 12, 11, 6, 9, 9, 13, 2, 5, 5, 5, 11, 5, 11, 5, 14, 15, 11, 11, 15, 16, 16, 17, 18, 15, 15, 15, 3, 3, 3, 3, 3, 3, 16, 3, 5, 5, 9, 11, 19, 19, 19, 9, 15, 16, 20, 4, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 9, 9, 9, 9, 9, 9, 4, 9, 21, 5, 5, 5, 16, 15, 5, 16, 16, 16, 22, 16, 16, 16, 16, 16, 15, 15, 15, 15, 15, 5, 5, 5, 5, 5, 5, 5, 5, 23, 5, 5, 5, 4, 5, 23, 5, 5, 5, 5, 5, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
