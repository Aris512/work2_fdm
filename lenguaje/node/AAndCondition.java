/* This file was generated by SableCC (http://www.sablecc.org/). */

package lenguaje.node;

import lenguaje.analysis.*;

@SuppressWarnings("nls")
public final class AAndCondition extends PCondition
{
    private PCondition _condition_;
    private TAnd _and_;
    private PSecondCondition _secondCondition_;

    public AAndCondition()
    {
        // Constructor
    }

    public AAndCondition(
        @SuppressWarnings("hiding") PCondition _condition_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PSecondCondition _secondCondition_)
    {
        // Constructor
        setCondition(_condition_);

        setAnd(_and_);

        setSecondCondition(_secondCondition_);

    }

    @Override
    public Object clone()
    {
        return new AAndCondition(
            cloneNode(this._condition_),
            cloneNode(this._and_),
            cloneNode(this._secondCondition_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndCondition(this);
    }

    public PCondition getCondition()
    {
        return this._condition_;
    }

    public void setCondition(PCondition node)
    {
        if(this._condition_ != null)
        {
            this._condition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condition_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PSecondCondition getSecondCondition()
    {
        return this._secondCondition_;
    }

    public void setSecondCondition(PSecondCondition node)
    {
        if(this._secondCondition_ != null)
        {
            this._secondCondition_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._secondCondition_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condition_)
            + toString(this._and_)
            + toString(this._secondCondition_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condition_ == child)
        {
            this._condition_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._secondCondition_ == child)
        {
            this._secondCondition_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condition_ == oldChild)
        {
            setCondition((PCondition) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._secondCondition_ == oldChild)
        {
            setSecondCondition((PSecondCondition) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
