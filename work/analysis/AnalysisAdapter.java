/* This file was generated by SableCC (http://www.sablecc.org/). */

package work.analysis;

import java.util.*;
import work.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMainProgram(AMainProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFormatDecProgram(AFormatDecProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDeclarationDeclaration(AIntDeclarationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringDeclarationDeclaration(AStringDeclarationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleDeclarationDeclaration(ADoubleDeclarationDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntDeclarationAssignmentDeclaration(AIntDeclarationAssignmentDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringDeclarationAssignmentDeclaration(AStringDeclarationAssignmentDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleDeclarationAssignmentDeclaration(ADoubleDeclarationAssignmentDeclaration node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintVarLine(APrintVarLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintStringLine(APrintStringLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintNumberLine(APrintNumberLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInputLine(AInputLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFlowControlLine(AFlowControlLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignmentLine(AAssignmentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfFlowControl(AIfFlowControl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfElseFlowControl(AIfElseFlowControl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileFlowControl(AWhileFlowControl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASecondConditionCondition(ASecondConditionCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndCondition(AAndCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrCondition(AOrCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleEqualsSecondCondition(ADoubleEqualsSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotEqualsSecondCondition(ANotEqualsSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterSecondCondition(AGreaterSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterEqSecondCondition(AGreaterEqSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessSecondCondition(ALessSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessEqSecondCondition(ALessEqSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGroupedSecondCondition(AGroupedSecondCondition node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarItem1(AVarItem1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberItem1(ANumberItem1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrItem1(AStrItem1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarItem2(AVarItem2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberItem2(ANumberItem2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrItem2(AStrItem2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStrAssignmentAssignment(AStrAssignmentAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprAssignmentAssignment(AExprAssignmentAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInt(TInt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleEquals(TDoubleEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNotEquals(TNotEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessEq(TLessEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterEq(TGreaterEq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPrintln(TPrintln node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMain(TMain node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInput(TInput node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVar(TVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
