/* This file was generated by SableCC (http://www.sablecc.org/). */

package lenguaje.analysis;

import java.util.*;
import lenguaje.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAFactorExpression(AFactorExpression node)
    {
        defaultIn(node);
    }

    public void outAFactorExpression(AFactorExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpression(AFactorExpression node)
    {
        inAFactorExpression(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpression(node);
    }

    public void inAPlusExpression(APlusExpression node)
    {
        defaultIn(node);
    }

    public void outAPlusExpression(APlusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpression(APlusExpression node)
    {
        inAPlusExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusExpression(node);
    }

    public void inAMinusExpression(AMinusExpression node)
    {
        defaultIn(node);
    }

    public void outAMinusExpression(AMinusExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpression(AMinusExpression node)
    {
        inAMinusExpression(node);
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusExpression(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inATimesFactor(ATimesFactor node)
    {
        defaultIn(node);
    }

    public void outATimesFactor(ATimesFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesFactor(ATimesFactor node)
    {
        inATimesFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getTimes() != null)
        {
            node.getTimes().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATimesFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAExpressionTerm(AExpressionTerm node)
    {
        defaultIn(node);
    }

    public void outAExpressionTerm(AExpressionTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressionTerm(AExpressionTerm node)
    {
        inAExpressionTerm(node);
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        outAExpressionTerm(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getIfStatement() != null)
        {
            node.getIfStatement().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getPrintStatement() != null)
        {
            node.getPrintStatement().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inAAssignmentStatement(AAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStatement(AAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStatement(AAssignmentStatement node)
    {
        inAAssignmentStatement(node);
        if(node.getAssignmentStatement() != null)
        {
            node.getAssignmentStatement().apply(this);
        }
        outAAssignmentStatement(node);
    }

    public void inABlockStatement(ABlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockStatement(ABlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStatement(ABlockStatement node)
    {
        inABlockStatement(node);
        if(node.getBlockStatement() != null)
        {
            node.getBlockStatement().apply(this);
        }
        outABlockStatement(node);
    }

    public void inASimpleIfStatement(ASimpleIfStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleIfStatement(ASimpleIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleIfStatement(ASimpleIfStatement node)
    {
        inASimpleIfStatement(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outASimpleIfStatement(node);
    }

    public void inAWithElseIfStatement(AWithElseIfStatement node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfStatement(AWithElseIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfStatement(AWithElseIfStatement node)
    {
        inAWithElseIfStatement(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outAWithElseIfStatement(node);
    }

    public void inALoopWhileStatement(ALoopWhileStatement node)
    {
        defaultIn(node);
    }

    public void outALoopWhileStatement(ALoopWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALoopWhileStatement(ALoopWhileStatement node)
    {
        inALoopWhileStatement(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        outALoopWhileStatement(node);
    }

    public void inABlockBlockStatement(ABlockBlockStatement node)
    {
        defaultIn(node);
    }

    public void outABlockBlockStatement(ABlockBlockStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlockStatement(ABlockBlockStatement node)
    {
        inABlockBlockStatement(node);
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        outABlockBlockStatement(node);
    }

    public void inAPrintStringPrintStatement(APrintStringPrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStringPrintStatement(APrintStringPrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStringPrintStatement(APrintStringPrintStatement node)
    {
        inAPrintStringPrintStatement(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getStringlit() != null)
        {
            node.getStringlit().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintStringPrintStatement(node);
    }

    public void inAPrintExprPrintStatement(APrintExprPrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintExprPrintStatement(APrintExprPrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintExprPrintStatement(APrintExprPrintStatement node)
    {
        inAPrintExprPrintStatement(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintExprPrintStatement(node);
    }

    public void inAPrintlnStringPrintStatement(APrintlnStringPrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStringPrintStatement(APrintlnStringPrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStringPrintStatement(APrintlnStringPrintStatement node)
    {
        inAPrintlnStringPrintStatement(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getStringlit() != null)
        {
            node.getStringlit().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintlnStringPrintStatement(node);
    }

    public void inAPrintlnExprPrintStatement(APrintlnExprPrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintlnExprPrintStatement(APrintlnExprPrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnExprPrintStatement(APrintlnExprPrintStatement node)
    {
        inAPrintlnExprPrintStatement(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintlnExprPrintStatement(node);
    }

    public void inAAssignAssignmentStatement(AAssignAssignmentStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignAssignmentStatement(AAssignAssignmentStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignAssignmentStatement(AAssignAssignmentStatement node)
    {
        inAAssignAssignmentStatement(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getExpression() != null)
        {
            node.getExpression().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignAssignmentStatement(node);
    }
}
