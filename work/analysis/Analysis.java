/* This file was generated by SableCC (http://www.sablecc.org/). */

package work.analysis;

import work.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAMainProgram(AMainProgram node);
    void caseAFormatDecProgram(AFormatDecProgram node);
    void caseAIntDeclarationDeclaration(AIntDeclarationDeclaration node);
    void caseAStringDeclarationDeclaration(AStringDeclarationDeclaration node);
    void caseADoubleDeclarationDeclaration(ADoubleDeclarationDeclaration node);
    void caseAIntDeclarationAssignmentDeclaration(AIntDeclarationAssignmentDeclaration node);
    void caseAStringDeclarationAssignmentDeclaration(AStringDeclarationAssignmentDeclaration node);
    void caseADoubleDeclarationAssignmentDeclaration(ADoubleDeclarationAssignmentDeclaration node);
    void caseAPrintVarLine(APrintVarLine node);
    void caseAPrintStringLine(APrintStringLine node);
    void caseAPrintNumberLine(APrintNumberLine node);
    void caseAInputLine(AInputLine node);
    void caseAFlowControlLine(AFlowControlLine node);
    void caseAAssignmentLine(AAssignmentLine node);
    void caseAIfFlowControl(AIfFlowControl node);
    void caseAIfElseFlowControl(AIfElseFlowControl node);
    void caseAWhileFlowControl(AWhileFlowControl node);
    void caseAElseStatement(AElseStatement node);
    void caseASecondConditionCondition(ASecondConditionCondition node);
    void caseAAndCondition(AAndCondition node);
    void caseAOrCondition(AOrCondition node);
    void caseADoubleEqualsSecondCondition(ADoubleEqualsSecondCondition node);
    void caseANotEqualsSecondCondition(ANotEqualsSecondCondition node);
    void caseAGreaterSecondCondition(AGreaterSecondCondition node);
    void caseAGreaterEqSecondCondition(AGreaterEqSecondCondition node);
    void caseALessSecondCondition(ALessSecondCondition node);
    void caseALessEqSecondCondition(ALessEqSecondCondition node);
    void caseAGroupedSecondCondition(AGroupedSecondCondition node);
    void caseAVarItem1(AVarItem1 node);
    void caseANumberItem1(ANumberItem1 node);
    void caseAStrItem1(AStrItem1 node);
    void caseAVarItem2(AVarItem2 node);
    void caseANumberItem2(ANumberItem2 node);
    void caseAStrItem2(AStrItem2 node);
    void caseAStrAssignmentAssignment(AStrAssignmentAssignment node);
    void caseAExprAssignmentAssignment(AExprAssignmentAssignment node);
    void caseAFactorExpr(AFactorExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAModFactor(AModFactor node);
    void caseANumberTerm(ANumberTerm node);
    void caseAVarTerm(AVarTerm node);
    void caseAExprTerm(AExprTerm node);

    void caseTComment(TComment node);
    void caseTNumber(TNumber node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTInt(TInt node);
    void caseTDouble(TDouble node);
    void caseTString(TString node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTSemicolon(TSemicolon node);
    void caseTEquals(TEquals node);
    void caseTDoubleEquals(TDoubleEquals node);
    void caseTNotEquals(TNotEquals node);
    void caseTLessEq(TLessEq node);
    void caseTGreaterEq(TGreaterEq node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTPrint(TPrint node);
    void caseTPrintln(TPrintln node);
    void caseTMain(TMain node);
    void caseTWhile(TWhile node);
    void caseTInput(TInput node);
    void caseTVar(TVar node);
    void caseTBlank(TBlank node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
