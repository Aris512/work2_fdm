Package work;

Helpers
  digit = ['0' .. '9'];
  not_star       = [[0 .. 0xffff] - '*'];
  not_slash      = [[0 .. 0xffff] - '/'];
  star_not_slash = '*' not_slash;
  comment_char   = not_star | star_not_slash;
  non_quote      = [[0 .. 0xffff] - '"'];

Tokens
  comment = '/*' comment_char* '*/';
  number = digit+ | digit+ '.' digit+;
  string_literal = '"' non_quote* '"';
  int = 'int';
  double = 'double';
  string = 'string';
  plus = '+';
  minus = '-';
  mult = '*';
  div = '/';
  mod = '%';
  l_par = '(';
  r_par = ')';
  semicolon = ';';
  double_equals = '==';
  equals = '=';
  not_equals = '!=';
  less_eq = '<=';
  greater_eq = '>=';
  less = '<';
  greater = '>';
  and = '&&';
  or = '||';
  if = 'if';
  else = 'else';
  l_bracket = '{';
  r_bracket = '}';
  print = 'print';
  println = 'println';
  main = 'main';
  while = 'while';
  input = 'input';
  var = ['a' .. 'z'] (['a' .. 'z'] | ['0' .. '9'])*;
  blank = ( ' ' | 13 | 10 )+;

Ignored Tokens
  blank, comment;

Productions
  start=main_program;
  
  main_program = main l_par r_par l_bracket program r_bracket;

  program = 
    {format_dec} declaration* line*;

  declaration = 
    {int_declaration} int var semicolon | 
    {string_declaration} string var semicolon | 
    {double_declaration} double var semicolon | 
    {int_declaration_assignment} int assignment semicolon | 
    {string_declaration_assignment} string assignment semicolon | 
    {double_declaration_assignment} double assignment semicolon;

  line = 
    {print_var} print l_par var r_par semicolon | 
    {print_string} print l_par string_literal r_par semicolon |
    {print_number} print l_par number r_par semicolon |
    {println_var} println l_par var r_par semicolon |
    {println_string} println l_par string_literal r_par semicolon |
    {println_number} println l_par number r_par semicolon |
    {input} input l_par var r_par semicolon |
    {flow_control} flow_control |
    {assignment} assignment semicolon;

  flow_control =
    {if} if l_par condition r_par l_bracket line* r_bracket |
    {if_else} if l_par condition r_par l_bracket line* r_bracket else_statement |
    {while} while l_par condition r_par l_bracket line* r_bracket;

  else_statement = else l_bracket line* r_bracket;

  condition = 
    {second_condition} second_condition |
    {and} condition and second_condition |
    {or} condition or second_condition;

  second_condition = 
    {double_equals} item1 double_equals item2 |
    {not_equals} item1 not_equals item2 |
    {greater} item1 greater item2 |
    {greater_eq} item1 greater_eq item2 |
    {less} item1 less item2 |
    {less_eq} item1 less_eq item2 |
    {grouped} l_par condition r_par;

  item1 =
    {var} var |
    {number} number |
    {str} string_literal;

  item2 = 
    {var} var |
    {number} number |
    {str} string_literal;

  assignment = 
    {str_assignment} var equals string_literal |
    {expr_assignment} var equals expr;

  expr = 
    {factor} factor | 
    {plus} expr plus factor |
    {minus} expr minus factor;

  factor =
    {term} term |
    {mult} factor mult term |
    {div} factor div term | 
    {mod} factor mod term;

  term =
    {number} number |
    {var} var |
    {expr} l_par expr r_par;