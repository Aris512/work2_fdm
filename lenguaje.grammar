Package lenguaje;

Helpers
    digit = ['0'..'9'];
    letter = ['a'..'z'];
    id = letter (letter | digit)*;
    string_char = letter | digit | ' ' | '!' | '.' | ',' | ':' | ';';
    string_literal = '"' string_char* '"';
    decimal = digit+ '.' digit+;
    lf = 0x000a;
    cr = 0x000d;
    line_terminator = lf | cr | cr lf;
    input_character = [0x0000..0x0009] | [0x000B..0x000C] | [0x000E..0xFFFF];
    not_star = [0x0000..0x0029] | [0x002B..0xFFFF]; // todo menos '*'
    not_star_not_slash = [0x0000..0x0029] | [0x002B..0x002C] | [0x002E..0xFFFF]; // todo menos '*' y '/'

Tokens
    int = 'int';
    str = 'str';
    double = 'double';
    print = 'print';
    println = 'println';
    while = 'while';
    if = 'if';
    else = 'else';
    input = 'input';
    plus = '+';
    minus = '-';
    times = '*';
    div = '/';
    mod = '%';
    e = '=';
    eqeq = '==';
    gt = '>';
    lt = '<';
    noteq = '!=';
    gte = '>=';
    lte = '<=';
    and = '&&';
    or = '||';
    increment = '++';
    decrement = '--';
    lparen = '(';
    rparen = ')';
    lbrace = '{';
    rbrace = '}';
    semicolon = ';';
    decimalnum = decimal;
    number = digit+;
    stringlit = string_literal;
    identifier = id;
    whitespace = (' ' | '\t' | '\n' | '\r')+;
    multi_line_comment = '/*' not_star* '*' (not_star_not_slash not_star* '*')* '/';
    line_comment = '//' input_character* line_terminator?;

Ignored Tokens
    multi_line_comment,
    line_comment;

Productions
    program
        = statement*;

    expression =
        {factor} factor |
        {plus} expression plus factor |
        {minus} expression minus factor;

    factor =
        {term} term |
        {times} factor times term |
        {div} factor div term |
        {mod} factor mod term;

    term =
        {number} number |
        {expression} lparen logic_expression rparen;
    
    logic_expression =
        {comp} comp_expr |
        {or} logic_expression or comp_expr;
    
    comp_expr =
        {arit} expression;

    statement =
        {if} if_statement |
        {while} while_statement |
        {print} print_statement |
        {assignment} assignment_statement |
        {block} block_statement;

    if_statement =
        {simple} if lparen logic_expression rparen statement |
        {with_else} if lparen logic_expression rparen else statement;

    while_statement =
        {loop} while lbrace logic_expression rbrace statement;

    block_statement =
        {block} lbrace statement* rbrace;

    print_statement =
        {print_string} print lparen stringlit rparen semicolon |
        {print_expr} print lparen expression rparen semicolon |
        {println_string} println lparen stringlit rparen semicolon |
        {println_expr} println lparen expression rparen semicolon;

    assignment_statement =
        {assign} identifier e expression semicolon;