/* This file was generated by SableCC (http://www.sablecc.org/). */

package work.analysis;

import java.util.*;
import work.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getMainProgram() != null)
        {
            node.getMainProgram().apply(this);
        }
        outAStart(node);
    }

    public void inAMainProgram(AMainProgram node)
    {
        defaultIn(node);
    }

    public void outAMainProgram(AMainProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainProgram(AMainProgram node)
    {
        inAMainProgram(node);
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAMainProgram(node);
    }

    public void inAFormatDecProgram(AFormatDecProgram node)
    {
        defaultIn(node);
    }

    public void outAFormatDecProgram(AFormatDecProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormatDecProgram(AFormatDecProgram node)
    {
        inAFormatDecProgram(node);
        {
            List<PDeclaration> copy = new ArrayList<PDeclaration>(node.getDeclaration());
            for(PDeclaration e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        outAFormatDecProgram(node);
    }

    public void inAIntDeclarationDeclaration(AIntDeclarationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIntDeclarationDeclaration(AIntDeclarationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDeclarationDeclaration(AIntDeclarationDeclaration node)
    {
        inAIntDeclarationDeclaration(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIntDeclarationDeclaration(node);
    }

    public void inAStringDeclarationDeclaration(AStringDeclarationDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringDeclarationDeclaration(AStringDeclarationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDeclarationDeclaration(AStringDeclarationDeclaration node)
    {
        inAStringDeclarationDeclaration(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStringDeclarationDeclaration(node);
    }

    public void inADoubleDeclarationDeclaration(ADoubleDeclarationDeclaration node)
    {
        defaultIn(node);
    }

    public void outADoubleDeclarationDeclaration(ADoubleDeclarationDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleDeclarationDeclaration(ADoubleDeclarationDeclaration node)
    {
        inADoubleDeclarationDeclaration(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADoubleDeclarationDeclaration(node);
    }

    public void inAIntDeclarationAssignmentDeclaration(AIntDeclarationAssignmentDeclaration node)
    {
        defaultIn(node);
    }

    public void outAIntDeclarationAssignmentDeclaration(AIntDeclarationAssignmentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDeclarationAssignmentDeclaration(AIntDeclarationAssignmentDeclaration node)
    {
        inAIntDeclarationAssignmentDeclaration(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIntDeclarationAssignmentDeclaration(node);
    }

    public void inAStringDeclarationAssignmentDeclaration(AStringDeclarationAssignmentDeclaration node)
    {
        defaultIn(node);
    }

    public void outAStringDeclarationAssignmentDeclaration(AStringDeclarationAssignmentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringDeclarationAssignmentDeclaration(AStringDeclarationAssignmentDeclaration node)
    {
        inAStringDeclarationAssignmentDeclaration(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAStringDeclarationAssignmentDeclaration(node);
    }

    public void inADoubleDeclarationAssignmentDeclaration(ADoubleDeclarationAssignmentDeclaration node)
    {
        defaultIn(node);
    }

    public void outADoubleDeclarationAssignmentDeclaration(ADoubleDeclarationAssignmentDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleDeclarationAssignmentDeclaration(ADoubleDeclarationAssignmentDeclaration node)
    {
        inADoubleDeclarationAssignmentDeclaration(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outADoubleDeclarationAssignmentDeclaration(node);
    }

    public void inAPrintVarLine(APrintVarLine node)
    {
        defaultIn(node);
    }

    public void outAPrintVarLine(APrintVarLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintVarLine(APrintVarLine node)
    {
        inAPrintVarLine(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintVarLine(node);
    }

    public void inAPrintStringLine(APrintStringLine node)
    {
        defaultIn(node);
    }

    public void outAPrintStringLine(APrintStringLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStringLine(APrintStringLine node)
    {
        inAPrintStringLine(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintStringLine(node);
    }

    public void inAPrintNumberLine(APrintNumberLine node)
    {
        defaultIn(node);
    }

    public void outAPrintNumberLine(APrintNumberLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintNumberLine(APrintNumberLine node)
    {
        inAPrintNumberLine(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintNumberLine(node);
    }

    public void inAPrintlnVarLine(APrintlnVarLine node)
    {
        defaultIn(node);
    }

    public void outAPrintlnVarLine(APrintlnVarLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnVarLine(APrintlnVarLine node)
    {
        inAPrintlnVarLine(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintlnVarLine(node);
    }

    public void inAPrintlnStringLine(APrintlnStringLine node)
    {
        defaultIn(node);
    }

    public void outAPrintlnStringLine(APrintlnStringLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnStringLine(APrintlnStringLine node)
    {
        inAPrintlnStringLine(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintlnStringLine(node);
    }

    public void inAPrintlnNumberLine(APrintlnNumberLine node)
    {
        defaultIn(node);
    }

    public void outAPrintlnNumberLine(APrintlnNumberLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintlnNumberLine(APrintlnNumberLine node)
    {
        inAPrintlnNumberLine(node);
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrintlnNumberLine(node);
    }

    public void inAInputLine(AInputLine node)
    {
        defaultIn(node);
    }

    public void outAInputLine(AInputLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInputLine(AInputLine node)
    {
        inAInputLine(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAInputLine(node);
    }

    public void inAFlowControlLine(AFlowControlLine node)
    {
        defaultIn(node);
    }

    public void outAFlowControlLine(AFlowControlLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFlowControlLine(AFlowControlLine node)
    {
        inAFlowControlLine(node);
        if(node.getFlowControl() != null)
        {
            node.getFlowControl().apply(this);
        }
        outAFlowControlLine(node);
    }

    public void inAAssignmentLine(AAssignmentLine node)
    {
        defaultIn(node);
    }

    public void outAAssignmentLine(AAssignmentLine node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentLine(AAssignmentLine node)
    {
        inAAssignmentLine(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAssignmentLine(node);
    }

    public void inAIfFlowControl(AIfFlowControl node)
    {
        defaultIn(node);
    }

    public void outAIfFlowControl(AIfFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfFlowControl(AIfFlowControl node)
    {
        inAIfFlowControl(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAIfFlowControl(node);
    }

    public void inAIfElseFlowControl(AIfElseFlowControl node)
    {
        defaultIn(node);
    }

    public void outAIfElseFlowControl(AIfElseFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElseFlowControl(AIfElseFlowControl node)
    {
        inAIfElseFlowControl(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        if(node.getElseStatement() != null)
        {
            node.getElseStatement().apply(this);
        }
        outAIfElseFlowControl(node);
    }

    public void inAWhileFlowControl(AWhileFlowControl node)
    {
        defaultIn(node);
    }

    public void outAWhileFlowControl(AWhileFlowControl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileFlowControl(AWhileFlowControl node)
    {
        inAWhileFlowControl(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAWhileFlowControl(node);
    }

    public void inAElseStatement(AElseStatement node)
    {
        defaultIn(node);
    }

    public void outAElseStatement(AElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStatement(AElseStatement node)
    {
        inAElseStatement(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        {
            List<PLine> copy = new ArrayList<PLine>(node.getLine());
            for(PLine e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAElseStatement(node);
    }

    public void inASecondConditionCondition(ASecondConditionCondition node)
    {
        defaultIn(node);
    }

    public void outASecondConditionCondition(ASecondConditionCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASecondConditionCondition(ASecondConditionCondition node)
    {
        inASecondConditionCondition(node);
        if(node.getSecondCondition() != null)
        {
            node.getSecondCondition().apply(this);
        }
        outASecondConditionCondition(node);
    }

    public void inAAndCondition(AAndCondition node)
    {
        defaultIn(node);
    }

    public void outAAndCondition(AAndCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndCondition(AAndCondition node)
    {
        inAAndCondition(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getSecondCondition() != null)
        {
            node.getSecondCondition().apply(this);
        }
        outAAndCondition(node);
    }

    public void inAOrCondition(AOrCondition node)
    {
        defaultIn(node);
    }

    public void outAOrCondition(AOrCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrCondition(AOrCondition node)
    {
        inAOrCondition(node);
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getSecondCondition() != null)
        {
            node.getSecondCondition().apply(this);
        }
        outAOrCondition(node);
    }

    public void inADoubleEqualsSecondCondition(ADoubleEqualsSecondCondition node)
    {
        defaultIn(node);
    }

    public void outADoubleEqualsSecondCondition(ADoubleEqualsSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleEqualsSecondCondition(ADoubleEqualsSecondCondition node)
    {
        inADoubleEqualsSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getDoubleEquals() != null)
        {
            node.getDoubleEquals().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outADoubleEqualsSecondCondition(node);
    }

    public void inANotEqualsSecondCondition(ANotEqualsSecondCondition node)
    {
        defaultIn(node);
    }

    public void outANotEqualsSecondCondition(ANotEqualsSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualsSecondCondition(ANotEqualsSecondCondition node)
    {
        inANotEqualsSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getNotEquals() != null)
        {
            node.getNotEquals().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outANotEqualsSecondCondition(node);
    }

    public void inAGreaterSecondCondition(AGreaterSecondCondition node)
    {
        defaultIn(node);
    }

    public void outAGreaterSecondCondition(AGreaterSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterSecondCondition(AGreaterSecondCondition node)
    {
        inAGreaterSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outAGreaterSecondCondition(node);
    }

    public void inAGreaterEqSecondCondition(AGreaterEqSecondCondition node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqSecondCondition(AGreaterEqSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqSecondCondition(AGreaterEqSecondCondition node)
    {
        inAGreaterEqSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getGreaterEq() != null)
        {
            node.getGreaterEq().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outAGreaterEqSecondCondition(node);
    }

    public void inALessSecondCondition(ALessSecondCondition node)
    {
        defaultIn(node);
    }

    public void outALessSecondCondition(ALessSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessSecondCondition(ALessSecondCondition node)
    {
        inALessSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outALessSecondCondition(node);
    }

    public void inALessEqSecondCondition(ALessEqSecondCondition node)
    {
        defaultIn(node);
    }

    public void outALessEqSecondCondition(ALessEqSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqSecondCondition(ALessEqSecondCondition node)
    {
        inALessEqSecondCondition(node);
        if(node.getItem1() != null)
        {
            node.getItem1().apply(this);
        }
        if(node.getLessEq() != null)
        {
            node.getLessEq().apply(this);
        }
        if(node.getItem2() != null)
        {
            node.getItem2().apply(this);
        }
        outALessEqSecondCondition(node);
    }

    public void inAGroupedSecondCondition(AGroupedSecondCondition node)
    {
        defaultIn(node);
    }

    public void outAGroupedSecondCondition(AGroupedSecondCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGroupedSecondCondition(AGroupedSecondCondition node)
    {
        inAGroupedSecondCondition(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAGroupedSecondCondition(node);
    }

    public void inAVarItem1(AVarItem1 node)
    {
        defaultIn(node);
    }

    public void outAVarItem1(AVarItem1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarItem1(AVarItem1 node)
    {
        inAVarItem1(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarItem1(node);
    }

    public void inANumberItem1(ANumberItem1 node)
    {
        defaultIn(node);
    }

    public void outANumberItem1(ANumberItem1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberItem1(ANumberItem1 node)
    {
        inANumberItem1(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberItem1(node);
    }

    public void inAStrItem1(AStrItem1 node)
    {
        defaultIn(node);
    }

    public void outAStrItem1(AStrItem1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrItem1(AStrItem1 node)
    {
        inAStrItem1(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrItem1(node);
    }

    public void inAVarItem2(AVarItem2 node)
    {
        defaultIn(node);
    }

    public void outAVarItem2(AVarItem2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarItem2(AVarItem2 node)
    {
        inAVarItem2(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarItem2(node);
    }

    public void inANumberItem2(ANumberItem2 node)
    {
        defaultIn(node);
    }

    public void outANumberItem2(ANumberItem2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberItem2(ANumberItem2 node)
    {
        inANumberItem2(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberItem2(node);
    }

    public void inAStrItem2(AStrItem2 node)
    {
        defaultIn(node);
    }

    public void outAStrItem2(AStrItem2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrItem2(AStrItem2 node)
    {
        inAStrItem2(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrItem2(node);
    }

    public void inAStrAssignmentAssignment(AStrAssignmentAssignment node)
    {
        defaultIn(node);
    }

    public void outAStrAssignmentAssignment(AStrAssignmentAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrAssignmentAssignment(AStrAssignmentAssignment node)
    {
        inAStrAssignmentAssignment(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStrAssignmentAssignment(node);
    }

    public void inAExprAssignmentAssignment(AExprAssignmentAssignment node)
    {
        defaultIn(node);
    }

    public void outAExprAssignmentAssignment(AExprAssignmentAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAssignmentAssignment(AExprAssignmentAssignment node)
    {
        inAExprAssignmentAssignment(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprAssignmentAssignment(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAPlusExpr(APlusExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr(APlusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr(APlusExpr node)
    {
        inAPlusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAPlusExpr(node);
    }

    public void inAMinusExpr(AMinusExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr(AMinusExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr(AMinusExpr node)
    {
        inAMinusExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMinusExpr(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outADivFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAModFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAVarTerm(AVarTerm node)
    {
        defaultIn(node);
    }

    public void outAVarTerm(AVarTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTerm(AVarTerm node)
    {
        inAVarTerm(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTerm(node);
    }

    public void inAExprTerm(AExprTerm node)
    {
        defaultIn(node);
    }

    public void outAExprTerm(AExprTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprTerm(AExprTerm node)
    {
        inAExprTerm(node);
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAExprTerm(node);
    }
}
