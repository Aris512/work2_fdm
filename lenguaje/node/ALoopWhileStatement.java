/* This file was generated by SableCC (http://www.sablecc.org/). */

package lenguaje.node;

import lenguaje.analysis.*;

@SuppressWarnings("nls")
public final class ALoopWhileStatement extends PWhileStatement
{
    private TWhile _while_;
    private TLbrace _lbrace_;
    private PLogicExpression _logicExpression_;
    private TRbrace _rbrace_;
    private PStatement _statement_;

    public ALoopWhileStatement()
    {
        // Constructor
    }

    public ALoopWhileStatement(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") TLbrace _lbrace_,
        @SuppressWarnings("hiding") PLogicExpression _logicExpression_,
        @SuppressWarnings("hiding") TRbrace _rbrace_,
        @SuppressWarnings("hiding") PStatement _statement_)
    {
        // Constructor
        setWhile(_while_);

        setLbrace(_lbrace_);

        setLogicExpression(_logicExpression_);

        setRbrace(_rbrace_);

        setStatement(_statement_);

    }

    @Override
    public Object clone()
    {
        return new ALoopWhileStatement(
            cloneNode(this._while_),
            cloneNode(this._lbrace_),
            cloneNode(this._logicExpression_),
            cloneNode(this._rbrace_),
            cloneNode(this._statement_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopWhileStatement(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public TLbrace getLbrace()
    {
        return this._lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(this._lbrace_ != null)
        {
            this._lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrace_ = node;
    }

    public PLogicExpression getLogicExpression()
    {
        return this._logicExpression_;
    }

    public void setLogicExpression(PLogicExpression node)
    {
        if(this._logicExpression_ != null)
        {
            this._logicExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._logicExpression_ = node;
    }

    public TRbrace getRbrace()
    {
        return this._rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(this._rbrace_ != null)
        {
            this._rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrace_ = node;
    }

    public PStatement getStatement()
    {
        return this._statement_;
    }

    public void setStatement(PStatement node)
    {
        if(this._statement_ != null)
        {
            this._statement_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statement_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._lbrace_)
            + toString(this._logicExpression_)
            + toString(this._rbrace_)
            + toString(this._statement_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._lbrace_ == child)
        {
            this._lbrace_ = null;
            return;
        }

        if(this._logicExpression_ == child)
        {
            this._logicExpression_ = null;
            return;
        }

        if(this._rbrace_ == child)
        {
            this._rbrace_ = null;
            return;
        }

        if(this._statement_ == child)
        {
            this._statement_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        if(this._logicExpression_ == oldChild)
        {
            setLogicExpression((PLogicExpression) newChild);
            return;
        }

        if(this._rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

        if(this._statement_ == oldChild)
        {
            setStatement((PStatement) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
