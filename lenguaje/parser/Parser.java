/* This file was generated by SableCC (http://www.sablecc.org/). */

package lenguaje.parser;

import lenguaje.lexer.*;
import lenguaje.node.*;
import lenguaje.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AFactorExpression */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce APlusExpression */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AMinusExpression */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce ATimesFactor */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AModFactor */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce ANumberTerm */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AExpressionTerm */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce APrintStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAssignmentStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce ABlockStatement */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce ASimpleIfStatement */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AWithElseIfStatement */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list, false);
            }
            break;
            case 18: /* reduce ALoopWhileStatement */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AAblockblockstatement1BlockStatement */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AAblockblockstatement2BlockStatement */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce APrintStringPrintStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce APrintExprPrintStatement */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce APrintlnStringPrintStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce APrintlnExprPrintStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AAssignAssignmentStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, true);
            }
            break;
            case 27: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFactorExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexpressionNode1 = new AFactorExpression(pfactorNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce APlusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AMinusExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new ATermFactor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ATimesFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TTimes ttimesNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        ttimesNode3 = (TTimes)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ATimesFactor(pfactorNode2, ttimesNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMod tmodNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AModFactor(pfactorNode2, tmodNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ANumberTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermNode1 = new ANumberTerm(tnumberNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExpressionTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExpression pexpressionNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        ptermNode1 = new AExpressionTerm(tlparenNode2, pexpressionNode3, trparenNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfStatement pifstatementNode2;
        pifstatementNode2 = (PIfStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AIfStatement(pifstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileStatement pwhilestatementNode2;
        pwhilestatementNode2 = (PWhileStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileStatement(pwhilestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPrintStatement pprintstatementNode2;
        pprintstatementNode2 = (PPrintStatement)nodeArrayList1.get(0);

        pstatementNode1 = new APrintStatement(pprintstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignmentStatement passignmentstatementNode2;
        passignmentstatementNode2 = (PAssignmentStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignmentStatement(passignmentstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PBlockStatement pblockstatementNode2;
        pblockstatementNode2 = (PBlockStatement)nodeArrayList1.get(0);

        pstatementNode1 = new ABlockStatement(pblockstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ASimpleIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PExpression pexpressionNode4;
        TRparen trparenNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pifstatementNode1 = new ASimpleIfStatement(tifNode2, tlparenNode3, pexpressionNode4, trparenNode5, pstatementNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AWithElseIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfStatement pifstatementNode1;
        {
            // Block
        TElse telseNode2;
        TLparen tlparenNode3;
        PExpression pexpressionNode4;
        TRparen trparenNode5;
        PStatement pstatementNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pifstatementNode1 = new AWithElseIfStatement(telseNode2, tlparenNode3, pexpressionNode4, trparenNode5, pstatementNode6);
        }
	nodeList.add(pifstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ALoopWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStatement pwhilestatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLbrace tlbraceNode3;
        PExpression pexpressionNode4;
        TRbrace trbraceNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlbraceNode3 = (TLbrace)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trbraceNode5 = (TRbrace)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pwhilestatementNode1 = new ALoopWhileStatement(twhileNode2, tlbraceNode3, pexpressionNode4, trbraceNode5, pstatementNode6);
        }
	nodeList.add(pwhilestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAblockblockstatement1BlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockStatement pblockstatementNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        pblockstatementNode1 = new ABlockBlockStatement(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(pblockstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAblockblockstatement2BlockStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlockStatement pblockstatementNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRbrace trbraceNode5;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRbrace)nodeArrayList3.get(0);

        pblockstatementNode1 = new ABlockBlockStatement(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(pblockstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce APrintStringPrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrintStatement pprintstatementNode1;
        {
            // Block
        TPrint tprintNode2;
        TLparen tlparenNode3;
        TStringlit tstringlitNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tstringlitNode4 = (TStringlit)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pprintstatementNode1 = new APrintStringPrintStatement(tprintNode2, tlparenNode3, tstringlitNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pprintstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce APrintExprPrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrintStatement pprintstatementNode1;
        {
            // Block
        TPrint tprintNode2;
        TLparen tlparenNode3;
        PExpression pexpressionNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tprintNode2 = (TPrint)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pprintstatementNode1 = new APrintExprPrintStatement(tprintNode2, tlparenNode3, pexpressionNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pprintstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce APrintlnStringPrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrintStatement pprintstatementNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLparen tlparenNode3;
        TStringlit tstringlitNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        tstringlitNode4 = (TStringlit)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pprintstatementNode1 = new APrintlnStringPrintStatement(tprintlnNode2, tlparenNode3, tstringlitNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pprintstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APrintlnExprPrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrintStatement pprintstatementNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLparen tlparenNode3;
        PExpression pexpressionNode4;
        TRparen trparenNode5;
        TSemicolon tsemicolonNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pprintstatementNode1 = new APrintlnExprPrintStatement(tprintlnNode2, tlparenNode3, pexpressionNode4, trparenNode5, tsemicolonNode6);
        }
	nodeList.add(pprintstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAssignAssignmentStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignmentStatement passignmentstatementNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TEq teqNode3;
        PExpression pexpressionNode4;
        TSemicolon tsemicolonNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        teqNode3 = (TEq)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        tsemicolonNode5 = (TSemicolon)nodeArrayList4.get(0);

        passignmentstatementNode1 = new AAssignAssignmentStatement(tidentifierNode2, teqNode3, pexpressionNode4, tsemicolonNode5);
        }
	nodeList.add(passignmentstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {30, SHIFT, 7}, },
			{{-1, ERROR, 1}, {22, SHIFT, 16}, },
			{{-1, ERROR, 2}, {22, SHIFT, 17}, },
			{{-1, ERROR, 3}, {24, SHIFT, 18}, },
			{{-1, ERROR, 4}, {22, SHIFT, 19}, },
			{{-1, ERROR, 5}, {22, SHIFT, 20}, },
			{{-1, ERROR, 6}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 21}, {30, SHIFT, 7}, },
			{{-1, ERROR, 7}, {14, SHIFT, 23}, },
			{{-1, ERROR, 8}, {32, ACCEPT, -1}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 1}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {30, SHIFT, 7}, },
			{{-1, ERROR, 16}, {22, SHIFT, 25}, {28, SHIFT, 26}, {29, SHIFT, 27}, },
			{{-1, ERROR, 17}, {22, SHIFT, 25}, {28, SHIFT, 26}, {29, SHIFT, 31}, },
			{{-1, ERROR, 18}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 19}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 20}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 22}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {25, SHIFT, 36}, {30, SHIFT, 7}, },
			{{-1, ERROR, 23}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 25}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 27}, {23, SHIFT, 39}, },
			{{-1, ERROR, 28}, {9, SHIFT, 40}, {10, SHIFT, 41}, {23, SHIFT, 42}, },
			{{-1, REDUCE, 2}, {11, SHIFT, 43}, {12, SHIFT, 44}, {13, SHIFT, 45}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 31}, {23, SHIFT, 46}, },
			{{-1, ERROR, 32}, {9, SHIFT, 40}, {10, SHIFT, 41}, {23, SHIFT, 47}, },
			{{-1, ERROR, 33}, {9, SHIFT, 40}, {10, SHIFT, 41}, {25, SHIFT, 48}, },
			{{-1, ERROR, 34}, {9, SHIFT, 40}, {10, SHIFT, 41}, {23, SHIFT, 49}, },
			{{-1, ERROR, 35}, {9, SHIFT, 40}, {10, SHIFT, 41}, {23, SHIFT, 50}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 37}, {9, SHIFT, 40}, {10, SHIFT, 41}, {26, SHIFT, 51}, },
			{{-1, ERROR, 38}, {9, SHIFT, 40}, {10, SHIFT, 41}, {23, SHIFT, 52}, },
			{{-1, ERROR, 39}, {26, SHIFT, 53}, },
			{{-1, ERROR, 40}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 41}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 42}, {26, SHIFT, 56}, },
			{{-1, ERROR, 43}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 44}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 45}, {22, SHIFT, 25}, {28, SHIFT, 26}, },
			{{-1, ERROR, 46}, {26, SHIFT, 60}, },
			{{-1, ERROR, 47}, {26, SHIFT, 61}, },
			{{-1, ERROR, 48}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {30, SHIFT, 7}, },
			{{-1, ERROR, 49}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {30, SHIFT, 7}, },
			{{-1, ERROR, 50}, {3, SHIFT, 1}, {4, SHIFT, 2}, {5, SHIFT, 3}, {6, SHIFT, 4}, {7, SHIFT, 5}, {24, SHIFT, 6}, {30, SHIFT, 7}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 3}, {11, SHIFT, 43}, {12, SHIFT, 44}, {13, SHIFT, 45}, },
			{{-1, REDUCE, 4}, {11, SHIFT, 43}, {12, SHIFT, 44}, {13, SHIFT, 45}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, },
			{{-1, 28}, {17, 32}, {18, 33}, {19, 34}, {20, 35}, {23, 37}, {25, 38}, },
			{{-1, 29}, {40, 54}, {41, 55}, },
			{{-1, 30}, {43, 57}, {44, 58}, {45, 59}, },
			{{-1, 9}, {15, 24}, {22, 24}, {48, 62}, {49, 63}, {50, 64}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 12}, },
			{{-1, 13}, },
			{{-1, 14}, },
			{{-1, 15}, {6, 22}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'print', 'println', 'while', 'if', 'else', '{', identifier, EOF",
			"expecting: '('",
			"expecting: '{'",
			"expecting: 'print', 'println', 'while', 'if', 'else', '{', '}', identifier",
			"expecting: '='",
			"expecting: EOF",
			"expecting: 'print', 'println', 'while', 'if', 'else', '{', '}', identifier, EOF",
			"expecting: '(', number, stringlit",
			"expecting: '(', number",
			"expecting: '+', '-', '*', '/', '%', ')', '}', ';'",
			"expecting: ')'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', '}'",
			"expecting: '+', '-', ';'",
			"expecting: ';'",
			"expecting: 'print', 'println', 'while', 'if', 'else', '{', identifier",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 1, 1, 3, 4, 5, 6, 6, 6, 6, 6, 6, 0, 7, 7, 8, 8, 8, 6, 3, 8, 6, 8, 9, 10, 11, 9, 9, 10, 11, 12, 11, 11, 6, 13, 11, 14, 8, 8, 14, 8, 8, 8, 14, 14, 15, 15, 15, 6, 9, 6, 9, 9, 6, 9, 9, 9, 6, 6, 6, 6, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
