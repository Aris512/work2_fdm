Package lenguaje;

Helpers
    digit = ['0'..'9'];
    letter = ['a'..'z'];
    id = letter (letter | digit)*;
    string_char = letter | digit | ' ' | '!' | '.' | ',' | ':' | ';';
    string_literal = '"' string_char* '"';
    decimal = digit+ '.' digit+;

Tokens
    int = 'int';
    str = 'str';
    double = 'double';
    print = 'print';
    println = 'println';
    while = 'while';
    if = 'if';
    else = 'else';
    else_if = 'else if';
    input = 'input';
    plus = '+';
    minus = '-';
    times = '*';
    div = '/';
    mod = '%';
    eq = '=';
    eqeq = '==';
    gt = '>';
    lt = '<';
    and = '&&';
    or = '||';
    increment = '++';
    decrement = '--';
    lparen = '(';
    rparen = ')';
    lbrace = '{';
    rbrace = '}';
    semicolon = ';';
    decimalnum = decimal;
    number = digit+;
    stringlit = string_literal;
    identifier = id;
    whitespace = (' ' | '\t' | '\n' | '\r')+;
    

Ignored Tokens
    whitespace;

Productions
  expression =
    {add} expression plus term |
    {sub} expression minus term |
    {pass} term;

  term =
    {mul} term times factor |
    {div} term div factor |
    {mod} term mod factor |
    {pass} factor;

  factor =
    {number} number |
    {decimal} decimalnum |
    {id} identifier |
    {paren} lparen expression rparen;

  print_stmt =
    {print} print lparen expression rparen semicolon |
    {println} println lparen expression rparen semicolon;

  while_stmt =
    {while} while lparen condition rparen block;

  block =
    {block} lbrace statement* rbrace;

  if_stmt =
    {if} if lparen condition rparen block else_if_part? else_part?;

  else_if_part =
    {elseif} else_if lparen condition rparen block;

  else_part =
    {else} else block;

  condition =
    {or} condition or and_condition |
    {pass} and_condition;

  and_condition = 
    {and} and_condition and relation |
    {pass} relation;  

  relation =
    {eq} expression eqeq expression |
    {gt} expression gt expression |
    {lt} expression lt expression |
    {paren} lparen condition rpar;

  statement =
    {print_stmt} print_stmt |
    {while_stmt} while_stmt |
    {if_stmt} if_stmt |
    {assignment} assignment;

  assignment =
    {declare} type identifier eq expression semicolon |
    {assign} identifier eq expression semicolon;

  type =
    {int_type} int |
    {double_type} double |
    {string_type} str;